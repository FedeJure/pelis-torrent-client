{"version":3,"sources":["services/api.js","domain/movie.js","components/movieElement/MovieElement.jsx","services/router.js","repositories/moviesRepository.js","repositories/moviesGridRepository.js","components/movieGrid/MovieGrid.jsx","components/dropdownInput/DropdownInput.jsx","components/selectionButton/SelectionButton.jsx","components/searchBar/SearchBar.jsx","components/logo/Logo.jsx","repositories/languagesRepository.js","components/header/Header.jsx","repositories/genresRepository.js","screens/home/Home.jsx","components/selector/Selector.jsx","WebtorrentClient/WebtorrentClient.js","components/player/PlayerView.jsx","screens/movieDetail/MovieDetail.jsx","app/App.jsx","serviceWorker.js","index.js"],"names":["backendUrl","getImdbId","movieId","a","fetch","json","getMovieCompleteData","imdbId","searchMovies","query","language","getTrendingMovies","limit","page","genre","callback","then","response","result","getSupportedLanguages","movieFromResponse","title","details","summary","image","medium_cover_image","backgroundImage","background_image","torrents","year","id","rating","imdbCode","imdb_code","EmptyMovieElement","className","key","Math","random","src","MovieElement","movie","onClick","useState","loaded","setLoaded","onLoad","style","display","repoKey","repoIndex","JSON","parse","localStorage","getItem","find","item","setItem","stringify","storage","length","pop","splice","saveDate","Date","now","getTime","newMovies","oldMovies","MovieGrid","movies","setMovies","actualPage","setActualPage","history","useHistory","getDto","dtoListToElementList","dtoList","map","dto","_","MoviesRepository","push","Routes","window","location","reload","fetchMoviePage","addDefaultMovies","count","cachedList","MoviesGridRepository","removeDefaultMovies","aux","slice","value","newMoviesDto","data","fetchWithGenre","useEffect","name","defaultMovies","index","console","log","providedMovies","filter","element","props","label","pageStart","loadMore","hasMore","loader","theme","borderRadius","colors","primary25","customStyles","control","provided","state","backgroundColor","menuList","options","menu","input","color","noOptionMessage","valueContainer","DropdownInput","async","styles","SelectionButton","text","onSelect","open","setOpen","selected","setSelected","selection","setSelection","onMouseEnter","onMouseLeave","opt","MenuItem","Option","vote","date","SearchBar","onChange","components","loadOptions","Promise","resolve","reject","results","vote_average","release_date","poster_path","toString","search","cacheOptions","placeholder","Logo","languages","Header","onGenreSelected","onTypeSelected","setLanguage","setLanguages","showSearchBar","setShowSearchBar","isDesktop","useMediaQuery","lang","LanguagesRepository","res","mapped","iso_639_1","english_name","filteredLanguages","imdb_id","onSelectLanguage","genres","sort","b","onMobile","alt","Home","torrent","selectedGenre","hash","useParams","genreObject","g","type","Selector","setTorrent","selectTrailer","align","ready","loading","selectTorrent","quality","sdk","webtor","apiUrl","getMagnet","getTorrentUrl","error","magnet","fetchTorrent","seeder","get","infoHash","filePath","files","file","path","endsWith","streamUrl","videoUrlStream","href","PlayerView","videoUrl","availableSubtitles","crossOrigin","url","controls","width","height","light","config","attributes","tracks","sub","kind","srcLang","languageName","default","MovieDetail","setMovie","selectedTorrents","setSelectedTorrents","trailerUrl","setTrailerUrl","setVideoUrl","videoReady","setVideoReady","showTrailer","setShowTrailer","setAvailableSubtitles","setTorrentLoading","updatedMovie","t","setTorrentReady","tryGetMovieTrailer","getMovieTrailer","Error","trailer","v","site","catch","err","newMovie","moviesRepository","fetchedMovie","imdbid","setupSubtitles","subs","Object","keys","forEach","parseFloat","score","newTorrents","App","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","message"],"mappings":"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","file":"static/js/main.db4a8405.chunk.js","sourcesContent":["import { mockedgetImdbId, mockedgetMovieCompleteData, mockedsearchMovies, mockedgetTrendingMovies } from './mockedApi'\r\n\r\nconst mocked = false;\r\nconst allowedSubtitles = ['spa', 'eng', 'por'];\r\n\r\nconst backendUrl = \"https://pelis-torrent-backend.herokuapp.com\";\r\n// const backendUrl = \"http://localhost:3001\";\r\n\r\nconst getImdbId = async movieId => mocked ? mockedgetImdbId() : (await fetch(`${backendUrl}/tmdb/movie?movieId=${movieId}`)).json();\r\nconst getMovieCompleteData = async imdbId => mocked ? mockedgetMovieCompleteData() : (await fetch(`${backendUrl}/yts/movie?imdbId=${imdbId}`)).json();\r\nconst searchMovies = async (query, language) => mocked ? mockedsearchMovies() : (await fetch(`${backendUrl}/tmdb/search?language=${language}&page=1&query=${query}`)).json();\r\nconst getTrendingMovies = async (limit, page, genre, callback) => mocked ? mockedgetTrendingMovies(limit, page, callback) : fetch(`${backendUrl}/yts/homeMovies?limit=${limit}&page=${page}${genre ? \"&genre=\"+genre : \"\"}`)\r\n                            .then(response => response.json())\r\n                            .then(result => {\r\n                                callback(result);\r\n                            });\r\nconst getTmdbImgPath = image => `https://image.tmdb.org/t/p/w500/${image}`;\r\nconst getSupportedLanguages = async () => (await fetch(`${backendUrl}/tmdb/languages`)).json();\r\nconst getMovieTrailer = (movieId, language) => new Promise(async res => {\r\n    res(await (await fetch(`${backendUrl}/tmdb/trailer?movieId=${movieId}&language=${language}`)).json());\r\n});\r\nconst getSubtitles = imdbid => new Promise(async res => {\r\n    res(await (await fetch(`${backendUrl}/openSubtitles/search?imdbid=${imdbid}`)).json());\r\n});\r\n\r\nexport { getImdbId, getMovieCompleteData, searchMovies, getTmdbImgPath, getTrendingMovies, getSupportedLanguages, getMovieTrailer, getSubtitles };","const movieFromResponse = response => {\r\n    return ({\r\n        title: response.title,\r\n        details: response.summary,\r\n        image: response.medium_cover_image,\r\n        backgroundImage: response.background_image,\r\n        torrents: response.torrents,\r\n        year: response.year,\r\n        id: response.id,\r\n        rating: response.rating,\r\n        imdbCode: response.imdb_code\r\n    });\r\n};\r\n\r\nexport { movieFromResponse };","import React, { useState } from 'react'\r\nimport './MovieElement.css'\r\n\r\nconst MovieElement = ({movie, onClick}) => {\r\n    const [loaded, setLoaded] = useState(false);\r\n    return (\r\n        <><div className={`movieElement ${!loaded ? \"emptyMovieElement\" : \"\"}`} key={movie.title} onClick={onClick}>\r\n            <img src={movie.image} onLoad={() => setLoaded(true)} style={{display: loaded? \"unset\": \"none\"}}/>\r\n            {!loaded && <img src={process.env.PUBLIC_URL + \"/imageLoading.gif\"}/>}\r\n            <p>{movie.title}</p>\r\n            <span>{movie.year}</span>\r\n        </div>\r\n        {!loaded && <EmptyMovieElement/>}\r\n        </>\r\n    );\r\n};\r\n\r\nconst EmptyMovieElement = () => (\r\n    <div className=\"movieElement emptyMovieElement\" key={Math.random()}>\r\n        <img src={process.env.PUBLIC_URL + \"/imageLoading.gif\"}/>\r\n    </div>\r\n);\r\n\r\nexport default MovieElement;\r\nexport { EmptyMovieElement };","const getMovieUrl = movieId => {\r\n    return `/movie/${movieId}`;\r\n}\r\n\r\nconst getHomeRoute = () => {\r\n    return `/`;\r\n}\r\n\r\nconst getHomeRouteWithGenre = (genre) => {\r\n    return `/genre/${genre}`;\r\n}\r\n\r\nexport default { getMovieUrl, getHomeRoute, getHomeRouteWithGenre };","const repoKey = \"storageMoviesRepository\";\r\nconst repoIndexKey = 'storageMoviesIndex';\r\nconst maxLength = 10;\r\n\r\nconst getMovie = movieId => {\r\n    const repoIndex = JSON.parse(localStorage.getItem(repoIndexKey)) || [];\r\n    if (!repoIndex.find(item => item == movieId)) {\r\n        localStorage.setItem(repoIndexKey, JSON.stringify(repoIndex)); //inicializo si no esta inicializado\r\n        return null;\r\n    }\r\n    const storage = JSON.parse(localStorage.getItem(repoKey)) || {};\r\n    return storage[movieId];\r\n}\r\n\r\nconst saveMovie = movie => {\r\n    const repoIndex = JSON.parse(localStorage.getItem(repoIndexKey)) || [];\r\n    const storage = JSON.parse(localStorage.getItem(repoKey)) || {};\r\n    if (repoIndex.length >= 10) delete storage[repoIndex.pop()];\r\n    repoIndex.splice(0,0,movie.imdbCode);\r\n    storage[movie.imdbCode] = movie;\r\n\r\n    localStorage.setItem(repoKey, JSON.stringify(storage));\r\n    localStorage.setItem(repoIndexKey, JSON.stringify(repoIndex));\r\n}\r\n\r\nexport default { getMovie, saveMovie};","const repoKey = \"homeMovieList\";\r\nconst lastTimeSavedKey = \"homeMovieListDate\";\r\nconst hoursSaved = 12;\r\n\r\nconst getMovies = () => {\r\n    const saveDate = new Date(localStorage.getItem(lastTimeSavedKey));\r\n    const now = new Date();\r\n    const delta = now.getTime() - saveDate.getTime();\r\n    if (delta / 3600000 > hoursSaved) {\r\n        localStorage.setItem(repoKey, JSON.stringify([]));\r\n        localStorage.setItem(lastTimeSavedKey, now.getTime());\r\n    } \r\n    return JSON.parse(localStorage.getItem(repoKey)) || [];\r\n}\r\n\r\nconst saveNewMovies = newMovies => {\r\n    const oldMovies = JSON.parse(localStorage.getItem(repoKey)) || [];\r\n    localStorage.setItem(repoKey, JSON.stringify([...oldMovies, ...newMovies]));\r\n}\r\n\r\nexport default { getMovies, saveNewMovies};","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { getTrendingMovies } from '../../services/api';\nimport { movieFromResponse } from '../../domain/movie';\nimport MovieElement, { EmptyMovieElement } from '../../components/movieElement/MovieElement';\nimport Routes from \"../../services/router\";\nimport MoviesRepository from \"../../repositories/moviesRepository\";\nimport MoviesGridRepository from \"../../repositories/moviesGridRepository\";\nimport './MovieGrid.css';\n\nconst storageKey = \"homeMovieList\";\n\nconst MovieGrid = ({genre}) => {\n    const [movies, setMovies] = useState([]);\n    const [actualPage,setActualPage] = useState(1);\n    const [loadMore, setLoadMore] = useState(true);\n    const history = useHistory();\n    \n\n    const selectMovie = movie => {\n        MoviesRepository.saveMovie(movie);\n        history.push(Routes.getMovieUrl(movie.imdbCode));\n        window.location.reload();\n    }\n\n    const getDto = movie => {\n        return movieFromResponse(movie);\n    }\n\n    const dtoListToElementList = dtoList => {\n        return dtoList.map(dto => (\n            <MovieElement movie={dto} onClick={_ => selectMovie(dto)} id={dto.id}/>\n        ));\n    }\n\n    const fetchMoviePage = async () => {\n        addDefaultMovies();\n        const count = 50;\n        const cachedList = MoviesGridRepository.getMovies();\n        if (cachedList.length > count * actualPage) {\n            const oldMovies = removeDefaultMovies(movies);\n            const aux = [...oldMovies, ...dtoListToElementList(cachedList.slice(count*(actualPage-1), count*actualPage))];\n            setActualPage(actualPage + 1);\n            setMovies(aux);\n            return;\n        }\n        getTrendingMovies(count, actualPage, genre.value, result => {\n            const newMoviesDto = result.data.movies.map(getDto);\n            const oldMovies = removeDefaultMovies(movies);\n            const aux = [...oldMovies, ...dtoListToElementList(newMoviesDto)];\n            MoviesGridRepository.saveNewMovies(newMoviesDto);\n            setMovies(aux);    \n            setActualPage(actualPage + 1);\n        });\n    }\n\n    const fetchWithGenre = async () => {\n        const count = 50;\n        addDefaultMovies();\n        getTrendingMovies(count, actualPage, genre.value, result => {\n            if (!result.data.movies) {\n                fetchMoviePage();\n                return;\n            }\n            const newMoviesDto = result.data.movies.map(getDto);\n            const oldMovies = removeDefaultMovies(movies);\n            const aux = [...oldMovies, ...dtoListToElementList(newMoviesDto)];\n            setMovies(aux);    \n            setActualPage(actualPage + 1);\n        });\n    };\n\n    useEffect(() => {\n        setMovies([]);\n        setActualPage(0);\n    }, [genre]);\n\n    const addDefaultMovies = () => {\n        const movie = <EmptyMovieElement name=\"empty\"/>;\n        const defaultMovies = [];\n        for (let index = 0; index < 20; index++) {\n            defaultMovies.push(movie);\n            console.log(movie)\n        }\n        setMovies([...movies, defaultMovies]);\n    };\n\n    const removeDefaultMovies = (providedMovies) => {\n        const actualMovies = providedMovies.filter(element => element.props && element.props.name != \"empty\")\n        return actualMovies;\n    };\n\n    return (\n        <div className=\"movieGridContainer\">\n            <p>{genre.value ? genre.label : \"Last Releases\"}: <img className=\"titleBackground\" src={process.env.PUBLIC_URL + \"/titleBackground.svg\"}/></p>\n            <InfiniteScroll\n                pageStart={0}\n                loadMore={genre.value ? fetchWithGenre : fetchMoviePage}\n                hasMore={true}\n                loader={<div className=\"loader\" key={0}></div>}>\n                    <div className=\"movieGrid\">\n                        {movies}\n                    </div>\n            </InfiniteScroll>\n        </div>\n    )\n};\n\nexport default MovieGrid;","import React from 'react';\r\nimport AsyncSelect from 'react-select/async';\r\nimport Select from 'react-select';\r\n\r\nconst theme = theme => ({\r\n    ...theme,\r\n    borderRadius: 0,\r\n    colors: {\r\n      ...theme.colors,\r\n      primary25: 'rgba(77, 111, 167, 1)'\r\n    },\r\n});\r\n\r\n\r\nconst customStyles = {\r\n    control: (provided, state) => ({\r\n        backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n        display: 'flex'\r\n    }),\r\n    menuList: (provided, state) =>({\r\n        ...provided,\r\n        display: state.options.length > 0 ? provided.display : 'none'\r\n    }),\r\n    menu: (provided, state) =>({\r\n        ...provided,\r\n        backgroundColor: 'rgba(29, 39, 56, 1)',\r\n        display: state.options.length > 0 ? provided.display : 'none'\r\n    }),\r\n    input: (provided, state) =>({\r\n        ...provided,\r\n        color: 'white'\r\n    }),\r\n    noOptionMessage: (provided, state) => ({\r\n        backgroundColor: 'rgba(0, 0, 0, 0.3)'\r\n    }),\r\n    valueContainer: (provided, state) => ({\r\n        ...provided,\r\n        color: 'white'\r\n    })\r\n};\r\n\r\nconst DropdownInput = props => {\r\n\r\n    return props.async ? \r\n    <AsyncSelect {...props} styles={customStyles} theme={theme}/> :\r\n    <Select {...props} styles={customStyles} theme={theme}/>\r\n};\r\n\r\nexport default DropdownInput;","import React, {useState, useEffect} from 'react';\r\nimport \"./SelectionButton.css\"\r\n\r\nconst SelectionButton = ({text, options, onSelect, className}) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [selected, setSelected] = useState(false);\r\n    const [selection, setSelection] = useState(options[0] || {label: \"\"});\r\n\r\n    useEffect(() => {\r\n        setOpen(false);\r\n    }, [selected]);\r\n    return (\r\n        <div onClick={() => setOpen(!open)} onMouseEnter={() => setOpen(true)} onMouseLeave={() => setOpen(false)} className={`selectionButton ${className}`}>\r\n            <button><span>{text ? text : selection.label}</span><div className={`${open ? \"arrowUp2\" : \"arrowDown\"}`}></div></button>\r\n            <div className={`arrowUp ${open ? \"open\" : \"\"}`}></div>\r\n            <div className={`optionsContainer ${open ? \"open\" : \"\"}`}>\r\n                <div className=\"options\">{options.map(opt => <span onClick={() => {\r\n                    onSelect(opt);                    \r\n                    setSelected(!selected);\r\n                    setSelection(opt);\r\n                }}>{opt.label}</span>)}</div>\r\n            </div>\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default SelectionButton;","import React , { useState, useEffect } from \"react\";\r\nimport { components } from 'react-select';\r\nimport \"./SearchBar.css\";\r\nimport { searchMovies, getTmdbImgPath } from '../../services/api'\r\nimport DropdownInput from '../dropdownInput/DropdownInput'\r\nimport SelectionButton from '../selectionButton/SelectionButton'\r\n\r\n\r\nconst SearchBar = ({ onChange, language }) => {\r\n    return (\r\n            <DropdownInput\r\n            className=\"searchBar\"\r\n            async\r\n            options={[]}\r\n            components = { {Option: MenuItem} }\r\n            loadOptions={query => {\r\n                return new Promise(async (resolve, reject) => {\r\n                    const { results } = await searchMovies(query, language);\r\n                    const movie = results.map(\r\n                        ({\r\n                            title,\r\n                            vote_average,\r\n                            release_date,\r\n                            poster_path,\r\n                            id\r\n                        }) => {\r\n                            return {\r\n                                label: title,\r\n                                value: id.toString(),\r\n                                date: release_date,\r\n                                vote: vote_average,\r\n                                image: poster_path,\r\n                                name: title\r\n                            };\r\n                        }\r\n                    );\r\n                    resolve(movie)\r\n                });\r\n            }}\r\n            search\r\n            cacheOptions\r\n            placeholder=\"Search\"\r\n            onChange={item => onChange(item.value)}\r\n        />\r\n    );\r\n};\r\n\r\nconst MenuItem = props => {\r\n    const data = props.data;\r\n    return (\r\n        <components.Option id={data.name} {...props}>\r\n            <div className=\"search-item\">\r\n            <div>\r\n                <img src={data.image ? getTmdbImgPath(data.image) : process.env.PUBLIC_URL+\"/missing-file.png\"} />\r\n            </div>\r\n            <div className=\"search-item-container\">\r\n                <p className=\"search-item-title\">{data.name}</p>\r\n                <div className=\"search-item-description\">\r\n                    <span>\r\n                        {data.vote}\r\n                        <img className=\"rating-star\" src={process.env.PUBLIC_URL+\"/star.png\"} />\r\n                    </span>\r\n\r\n                    <span>{data.date}</span>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </components.Option>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\"\nimport Routes from \"../../services/router\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Logo.css\";\n\nconst Logo = () => {\n    const history = useHistory();\n    return (\n        <div className=\"logo\" onClick={() => history.push(Routes.getHomeRoute())}>\n            <img className=\"logoImage\" src={process.env.PUBLIC_URL + \"/logo.svg\"}/>\n            <img className=\"logoName\" src={process.env.PUBLIC_URL + \"/name.svg\"}/>\n        </div>\n    );\n};\n\nexport default Logo;","const repoKey = \"languages\";\r\n\r\nconst getLanguages = () => {\r\n    return  JSON.parse(localStorage.getItem(repoKey)) || [];\r\n}\r\n\r\nconst saveLanguages = languages => {\r\n    localStorage.setItem(repoKey, JSON.stringify(languages));\r\n}\r\n\r\nexport default { getLanguages, saveLanguages};","import React, { useState, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useHistory } from \"react-router-dom\";\nimport SearchBar from \"../../components/searchBar/SearchBar\";\nimport Logo from \"../../components/logo/Logo\";\nimport { getImdbId, getMovieCompleteData, getSupportedLanguages } from '../../services/api';\nimport { movieFromResponse } from '../../domain/movie';\nimport Routes from \"../../services/router\";\nimport MoviesRepository from \"../../repositories/moviesRepository\";\nimport LanguagesRepository from \"../../repositories/languagesRepository\";\nimport {getAvailableGenres} from \"../../repositories/genresRepository\";\nimport SelectionButton from '../selectionButton/SelectionButton'\nimport './Header.css'\n\nconst Header = ({onGenreSelected, onTypeSelected}) => {\n  const [language, setLanguage] = useState('en-US');\n  const [languages, setLanguages] = useState([]);\n  const [showSearchBar, setShowSearchBar] = useState(false);\n  const history = useHistory();\n  const isDesktop = useMediaQuery({ query: '(min-width: 960px)' })\n\n    useEffect(() => {\n        const lang = LanguagesRepository.getLanguages();\n        if (lang.length > 0) setLanguages(lang);\n        else getSupportedLanguages()\n        .then(res => {\n            const mapped = res.map(item =>({value: item.iso_639_1, label: item.name || item.english_name}));\n            const filteredLanguages = mapped.slice(1, mapped.length);\n            setLanguages(filteredLanguages);\n            LanguagesRepository.saveLanguages(filteredLanguages);\n        });\n    }, []);\n    const onSelectMovie = movie => {\n        MoviesRepository.saveMovie(movie);\n        history.push(Routes.getMovieUrl(movie.imdbCode));\n        window.location.reload();\n    }\n\n    const onChange = async movieId => {\n        if (!movieId) return;\n        const { imdb_id } = await getImdbId(movieId);\n        const { data } = await getMovieCompleteData(imdb_id);\n        if (data.movies && data.movies.length > 0)\n        onSelectMovie(movieFromResponse(data.movies[0]));\n    };\n\n    const onSelectLanguage = selected => {\n        setLanguage(selected.value);\n    };\n\n    const genres = getAvailableGenres().sort((a,b) => a.value - b.value);\n\n    const onMobile = (\n    <div className=\"headerContainer\">\n        <Logo />\n        <SelectionButton className=\"optionButton\" options={genres} text=\"Genre\" onSelect={onGenreSelected}/>\n        {/* <SelectionButton className=\"optionButton\" options={[{value: 'movie', label: \"Movie\"},{value: 'serie', label: \"Serie\"}]} text=\"Type\" onSelect={onTypeSelected}/> */}\n        {showSearchBar && <div className=\"mobileSearechContainer\">\n            <SearchBar className=\"searchBar\" onChange={onChange} language={language} onSelectLanguage={onSelectLanguage} languages={languages}/>\n            <SelectionButton options={[{value: 'en-US', label: \"English\"}, {value: 'es-MX', label: \"Español\"}]} onSelect={onSelectLanguage} className=\"languajeSelector\"/>            \n        </div>}                \n        <img className=\"searchButton\" src={process.env.PUBLIC_URL + \"/search.svg\"} alt=\"Search\" onClick={() => setShowSearchBar(!showSearchBar)}/>        \n    </div>);\n\n    const onDesktop = (\n    <div className=\"headerContainer\">\n        <Logo />\n        <div className=\"buttonContainer\">\n            <SelectionButton className=\"optionButton\" options={genres} text=\"Genre\" onSelect={onGenreSelected}/>\n            {/* <SelectionButton className=\"optionButton\" options={[{value: 'movie', label: \"Movie\"},{value: 'serie', label: \"Serie\"}]} text=\"Type\" onSelect={onTypeSelected}/> */}\n        </div>\n        <SearchBar className=\"searchBar\" onChange={onChange} language={language}/>\n        <SelectionButton className=\"languajeSelector\" options={[{value: 'en-US', label: \"English\"}, {value: 'es-MX', label: \"Español\"}]} onSelect={onSelectLanguage}/>\n    </div>);\n\n    return (isDesktop ? onDesktop : onMobile);\n};\n\nexport default Header;","const getAvailableGenres = () => ([{value: null, label: 'All'},\r\n                                   {value: 'comedy', label: 'Comedy'}, \r\n                                   {value: 'sci-fi', label: 'Sci-Fi'}, \r\n                                   {value: 'horror', label: 'Horror'}, \r\n                                   {value: 'romance', label: 'Romance'}, \r\n                                   {value: 'action', label: 'Action'}, \r\n                                   {value: 'thriller', label: 'Thriller'}, \r\n                                   {value: 'drama', label: 'Drama'}, \r\n                                   {value: 'mystery', label: 'Mystery'}, \r\n                                   {value: 'crime', label: 'Crime'}, \r\n                                   {value: 'animation', label: 'Animation'}, \r\n                                   {value: 'adventure', label: 'Adventure'}, \r\n                                   {value: 'fantasy', label: 'Fantasy'}, \r\n                                   {value: 'biography', label: 'Biography'}, \r\n                                   {value: 'family', label: 'Family'}, \r\n                                   {value: 'history', label: 'History'}, \r\n                                   {value: 'documentary', label: 'Documentary'}, \r\n                                   {value: 'music', label: 'Music'}, \r\n                                   {value: 'musical', label: 'Musical'}, \r\n                                   {value: 'sport', label: 'Sport'}, \r\n                                   {value: 'war', label: 'War'}, \r\n                                   {value: 'western', label: 'Western'}]);\r\n\r\nexport {getAvailableGenres};","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport \"./Home.css\";\r\nimport MovieGrid from \"../../components/movieGrid/MovieGrid\";\r\nimport Header from \"../../components/header/Header\";\r\nimport Routes from \"../../services/router\";\r\nimport MoviesRepository from \"../../repositories/moviesRepository\";\r\nimport { getAvailableGenres } from \"../../repositories/genresRepository\";\r\nimport AdsHelper from \"../../components/adsHelper/AdsHelper\";\r\n\r\nconst Home = () => {\r\n  const [torrent, setTorrent] = useState({});\r\n  const [selectedMovie, setSelectedMovie] = useState({});\r\n  const [selectedGenre, setSelectedGenre] = useState({value: null})\r\n  const showPlayer = torrent.hash;\r\n  const history = useHistory();\r\n  const { genre } = useParams();\r\n  const genreObject = getAvailableGenres().find(g => g.value == genre);\r\n\r\n  const onGenreChange = genre => {\r\n    if (!genre.value) history.push(Routes.getHomeRoute());\r\n    else history.push(Routes.getHomeRouteWithGenre(genre.value));\r\n    window.location.reload();\r\n  };\r\n\r\n  const onTypeChange = type => {\r\n    // console.log(type);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"Home commonPage\">\r\n      <Header onGenreSelected={onGenreChange} onTypeSelected={onTypeChange}/>\r\n      <MovieGrid genre={genreObject || selectedGenre}/>\r\n      {/* <AdsHelper/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\nimport \"./Selector.css\";\nvar selected = 0;\nconst Selector = ({ torrents, setTorrent, image, title, details, selectTrailer }) => {\n  const setSelected = value => selected = value;\n\n  const selectTorrent = (torrent, index) => {\n    if (torrent.ready) setSelected(index+1);\n    setTorrent(torrent);\n  };\n\n  return (\n    <div className=\"movie-selector\">\n      <div className=\"header\">\n        <div className=\"header-details\">\n          \n          <span><img src={image} align=\"left\"/><h3>{title}</h3>{details}</span>\n        </div>\n      </div>\n      <div className=\"options\">\n        <button key=\"trailer-button\" onClick={() => setSelected(0) || selectTrailer()} className={`ready ${selected == 0 ? \"active\" : \"\"}`}>\n          <span className=\"text\">Trailer</span>\n        </button>\n        {torrents.map((torrent, index) => (\n          <button key={torrent.hash} className={`${selected == index+1 && torrent.ready ? \"active\" : \"\"} ${torrent.ready ? \"ready\" : torrent.loading ? \"loading\" : \"pending\"}`} onClick={() =>selectTorrent(torrent, index)}>\n            <span className=\"text\">{torrent.loading && !torrent.ready && <img src={process.env.PUBLIC_URL + \"/loading.gif\"}/> }{torrent.quality}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Selector;\n","import webtor from '@webtor/platform-sdk-js';\r\n\r\nconst mocked = false;\r\n\r\nconst sdk = webtor({\r\n    // apiUrl: 'https://167.99.109.146:31189',\r\n    apiUrl: 'http://167.99.109.146:31189',\r\n});\r\n\r\nconst expire = 60*60*24; // 24 hours\r\n\r\nconst getMagnet = hash => `magnet:?xt=urn:btih:${hash}`;\r\n\r\nconst getTorrentUrl = async hash => mocked ? getMockedVideo() : new Promise(async (response, error) => {\r\n    const torrent = await sdk.magnet.fetchTorrent(getMagnet(hash));\r\n    sdk.torrent.push(torrent, expire);\r\n    const seeder = sdk.seeder.get(torrent.infoHash);\r\n    const filePath = torrent.files.find(file => file.path.endsWith(\"mp4\") || file.path.endsWith(\"mkv\")).path;\r\n    const videoUrlStream = (await seeder.streamUrl(filePath)).href;\r\n    filePath ? response((videoUrlStream)) : error(\"No video file found\");\r\n});\r\n\r\n\r\nexport { getTorrentUrl };\r\n\r\n\r\nconst getMockedVideo = () => new Promise(res => res('https://youtu.be/4N1iwQxiHrs?list=RDMMt2xOT9-DZGE'));","import React, { useEffect, useState, Children } from \"react\";\nimport { getTorrentUrl } from '../../WebtorrentClient/WebtorrentClient';\nimport ReactPlayer from 'react-player'\n\nimport \"./PlayerView.css\";\nconst PlayerView = ({ image, videoUrl, availableSubtitles }) => \n      (\n      <div className=\"playerView\" crossOrigin=\"anonymous\">\n        <ReactPlayer url={videoUrl}\n        className='react-player'\n        controls\n        width='100%'\n        height='100%'\n        light={image ? image : true}\n        config={{ file: {\n            attributes: {\n              crossOrigin: \"anonymous\"\n            },\n            tracks:\n             availableSubtitles && availableSubtitles.map(sub => ({kind: 'subtitles', src: sub.url, srcLang: sub.languageName, default: true, crossOrigin:\"anonymous\"}))\n          }}}>\n        </ReactPlayer>\n    </div>\n);\n\nexport default PlayerView;\n","import React, {useEffect, useState} from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Selector from \"../../components/selector/Selector\";\r\nimport moviesRepository from '../../repositories/moviesRepository';\r\nimport Header from '../../components/header/Header';\r\nimport PlayerView from \"../../components/player/PlayerView\";\r\nimport { getMovieCompleteData, getMovieTrailer, getSubtitles } from \"../../services/api\";\r\nimport { getTorrentUrl } from '../../WebtorrentClient/WebtorrentClient';\r\nimport { movieFromResponse } from \"../../domain/movie\";\r\nimport \"./MovieDetail.css\"\r\n\r\nconst MovieDetail = () => {\r\n    const [movie, setMovie] = useState(null);\r\n    const [selectedTorrents, setSelectedTorrents] = useState({});\r\n    const [trailerUrl, setTrailerUrl] = useState(null);\r\n    const [videoUrl, setVideoUrl] = useState(null);\r\n    const [videoReady, setVideoReady] = useState({hash: '', url: ''});\r\n    const [showTrailer, setShowTrailer] = useState(true);\r\n    const [availableSubtitles, setAvailableSubtitles] = useState([]);\r\n    const { movieId } = useParams();\r\n\r\n    const selectTorrent = torrent => {\r\n        const torrents = {...selectedTorrents};\r\n        if (torrent.hash && !selectedTorrents[torrent.hash]) {\r\n            getTorrentUrl(torrent.hash)\r\n            .then(url => setVideoReady({hash: torrent.hash, url}))\r\n            .catch(error => console.error(error));\r\n\r\n            const newTorrents = {...selectedTorrents, [torrent.hash]: {ready: false, url: ''} };\r\n            setSelectedTorrents(newTorrents);\r\n            setTorrentLoading(torrent.hash);\r\n            return;\r\n        }\r\n        if (torrent.hash && selectedTorrents[torrent.hash] && selectedTorrents[torrent.hash].ready) {\r\n            setVideoUrl(selectedTorrents[torrent.hash].url);\r\n            setShowTrailer(false);\r\n        }\r\n    }\r\n\r\n    const setTorrentLoading = hash => {\r\n        const updatedMovie = {...movie};\r\n        updatedMovie.torrents = updatedMovie.torrents.map(t => t.hash == hash ? {...t, loading: true} : t);\r\n        setMovie(updatedMovie);\r\n    };\r\n\r\n    const setTorrentReady = hash => {\r\n        const updatedMovie = {...movie};\r\n        updatedMovie.torrents = updatedMovie.torrents.map(t => t.hash == hash ? {...t, ready: true} : t);\r\n        setMovie(updatedMovie);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const torrents = {...selectedTorrents};\r\n        \r\n        if (!torrents[videoReady.hash]) return;\r\n        torrents[videoReady.hash].url = videoReady.url;\r\n        torrents[videoReady.hash].ready = true;\r\n        setSelectedTorrents(torrents);\r\n        setTorrentReady(videoReady.hash);\r\n    },[videoReady]);\r\n\r\n    const selectTrailer = () => {\r\n        setShowTrailer(true);\r\n    }\r\n\r\n    const tryGetMovieTrailer = () => {\r\n        getMovieTrailer(movieId, \"en-US\").then(res => {\r\n            if (!res.results) throw new Error(\"Content not found\");\r\n            var trailer = res.results.find(v => v.site == \"YouTube\");\r\n            var url = trailer ? `https://youtube.com/watch?v=${trailer.key}` : \"\";\r\n            setTrailerUrl(url)\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const tryGetCompleteMovieData = () => {\r\n        getMovieCompleteData(movieId).then(res => {\r\n            if (!res.data.movies) throw new Error(\"Content not found\");\r\n            const fetchedMovie = movieFromResponse(res.data.movies[0]);\r\n            setMovie(fetchedMovie);\r\n            moviesRepository.saveMovie(fetchedMovie);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n    useEffect(() => {\r\n        try {\r\n            var newMovie = moviesRepository.getMovie(movieId) || false;\r\n\r\n            tryGetMovieTrailer();\r\n\r\n            if (!newMovie) tryGetCompleteMovieData();\r\n            else setMovie(newMovie);\r\n            getSubtitles(newMovie.imdbCode).then(setupSubtitles); \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, []);\r\n\r\n    const setupSubtitles = subs => {\r\n        var aux = [];\r\n        Object.keys(subs).forEach(key => {\r\n            aux = [...aux,\r\n                    ...subs[key].sort((a,b) => parseFloat(b.score) - parseFloat(a.score)).slice(0,5)\r\n                ];\r\n        });\r\n        setAvailableSubtitles(aux);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieDetail commonPage\">\r\n            <Header/>\r\n            {movie && movie.backgroundImage && <img className=\"background\" src={movie.backgroundImage}/> }\r\n            {movie &&\r\n            <Selector\r\n                image={movie.image}\r\n                torrents={movie.torrents}\r\n                setTorrent={selectTorrent}\r\n                details={movie.details}\r\n                title={movie.title}\r\n                selectTrailer={selectTrailer}\r\n            />}\r\n            {!showTrailer && videoUrl && <PlayerView image={movie.image} videoUrl={videoUrl} availableSubtitles={availableSubtitles}/>}\r\n            {showTrailer && trailerUrl && <PlayerView videoUrl={trailerUrl}/>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MovieDetail;","import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport HomeScreen from '../screens/home/Home';\nimport MovieDetailScreen from '../screens/movieDetail/MovieDetail';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/genre/:genre\">\n          <>\n            <HomeScreen />\n            <img src={process.env.PUBLIC_URL + \"/under_construction1.png\"} alt=\"site under construction\" className=\"underConstructionImage\" />\n          </>\n        </Route>\n        <Route exact path=\"/\">\n          <>\n            <HomeScreen />\n            <img src={process.env.PUBLIC_URL + \"/under_construction1.png\"} alt=\"site under construction\" className=\"underConstructionImage\" />\n          </>\n        </Route>\n        <Route exact path=\"/movie/:movieId\">\n          <>\n          <MovieDetailScreen />\n            <img src={process.env.PUBLIC_URL + \"/under_construction1.png\"} alt=\"site under construction\" className=\"underConstructionImage\" />\n          </>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}